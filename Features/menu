#!/bin/bash
######################################
MYIP=$(curl -sS ipv4.icanhazip.com)
######################################
IPVPS=$(curl -s ipv4.icanhazip.com)
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
echo ""
clear
function bot(){
grenbo="\e[92;1m"
NC='\e[0m'
#install
clear
history -c 
rm -fr xbot.sh
rm -fr /usr/bin/kyt
rm -fr /usr/bin/xdbot.zip*
#color
NC='\e[0m'
u="\033[1;36m"
y="\033[1;93m"
g="\033[1;92m"
r="\033[1;91m"

REPO="https://raw.githubusercontent.com/sanzVPN/Azerd/ABSTRAK/bot/"
NS=$( cat /etc/xray/dns )
PUB=$( cat /etc/slowdns/server.pub )
domain=$(cat /etc/xray/domain)
#install
apt update && apt upgrade
apt install neofetch -y
apt install python3 python3-pip git
cd /usr/bin
wget -q -O bot.zip "${REPO}bot.zip"
unzip bot.zip
mv bot/* /usr/bin
chmod +x /usr/bin/*
rm -rf bot.zip
clear
wget -q -O xdbot.zip "${REPO}xbot.zip"
unzip xdbot.zip
pip3 install -r kyt/requirements.txt

clear
echo ""
figlet 'SANZ' | lolcat
echo -e "$u ┌────────────────────────────────────────────────┐${NC}"
echo -e "$u │ \e[1;97;101m                ADD BOT PANEL                 ${NC} ${u}│${NC}"
echo -e "$u └────────────────────────────────────────────────┘${NC}"
echo -e "$u ┌────────────────────────────────────────────────┐${NC}"
echo -e "$u │ ${g}Tutorial Creat Bot and ID Telegram                   ${NC}"
echo -e "$u │ ${g}Creat Bot and Token Bot : @BotFather                 ${NC}"
echo -e "$u │ ${g}Info Id Telegram : @MissRose_bot perintah /info      ${NC}"
echo -e "$u └────────────────────────────────────────────────┘${NC}"
echo -e ""
read -e -p "  [*] Input your Bot Token : " bottoken
read -e -p "  [*] Input Your Id Telegram : " admin
echo -e BOT_TOKEN='"'$bottoken'"' >> /usr/bin/kyt/var.txt
echo -e ADMIN='"'$admin'"' >> /usr/bin/kyt/var.txt
echo -e DOMAIN='"'$domain'"' >> /usr/bin/kyt/var.txt
echo -e PUB='"'$PUB'"' >> /usr/bin/kyt/var.txt
echo -e HOST='"'$NS'"' >> /usr/bin/kyt/var.txt
clear

if [ -e /etc/systemd/system/xbot.service ]; then
echo ""
else
rm -fr /etc/systemd/system/xbot.service
fi

cat > /etc/systemd/system/xbot.service << END
[Unit]
Description=Simple Bot Tele By - @xdxl_store
After=network.target

[Service]
WorkingDirectory=/usr/bin
ExecStart=/usr/bin/python3 -m kyt
Restart=always

[Install]
WantedBy=multi-user.target
END

systemctl daemon-reload
systemctl start xbot
systemctl enable xbot
systemctl restart xbot
cd

# // STATUS SERVICE BOT
bot_service=$(systemctl status xbot | grep active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
if [[ $bot_service == "running" ]]; then 
   sts_bot="${g}[ON]${NC}"
else
   sts_bot="${r}[OFF]${NC}"
fi

rm -fr /usr/bin/bot.zip
rm -fr /usr/bin/xdbot.zip
clear
neofetch
echo -e "  ${y} Your Data BOT Info"
echo -e "  ${u}┌───────────────────────────────────┐${NC}"
echo -e "  ${u}│$r Status BOT ${y}=$NC $sts_bot "
echo -e "  ${u}│$r Token BOT  ${y}=$NC $bottoken "
echo -e "  ${u}│$r Admin ID   ${y}=$NC $admin "
echo -e "  ${u}│$r Domain     ${y}=$NC $domain "
echo -e "  ${u}└───────────────────────────────────┘${NC}"
echo -e ""
history -c
read -p "  Press [ Enter ] to back on menu"
menu
}
######################################
# // INSTALL UDP CUSTOM
UDPX="https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2"
######################################
green="\033[1;32m"
red="\033[1;31m"
yellow="\033[93;1m"
# // Gettings Info

domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(printf '%(%H:%M:%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
######################################
# // USERNAME IZIN IPP
rm -f /usr/bin/user
username=$(curl -sS https://raw.githubusercontent.com/sanzVPN/Azerd/ABSTRAK/REGIST | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
rm -f /usr/bin/e
valid=$(curl -sS https://raw.githubusercontent.com/sanzVPN/Azerd/ABSTRAK/REGIST | grep $MYIP | awk '{print $3}')
echo "$valid" > /usr/bin/e
######################################
# // DETAIL ORDER IZIN IP
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
exp=$(cat /usr/bin/e)
######################################
clear
# // DAYS LEFT
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
######################################
# // VPS INFORMATION
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""
######################################
# // AKTIVATED & EXPIRED
Info="\033[92mACTIVED\033[0m"
Eror="\033[91mEXPIRED\033[0m"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(curl -sS https://raw.githubusercontent.com/sanzVPN/Azerd/ABSTRAK/REGIST | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Eror}"
fi
######################################
echo -e "\e[32mloading...\e[0m"
clear
######################################
# // GETTINGS SYSTEM
uptime="$(uptime -p | cut -d " " -f 2-10)"
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"
WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(curl -s ipinfo.io/ip )
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)

clear

######################################
# // RUNNING SSH
######################################
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${ON}ON${NC}"
else
   status_ssh="${red}OFF${NC} "
fi
######################################
# // RUNNING WEBSOCKET
######################################
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${yellow}ON${NC}"
else
    status_ws_epro="${red}OFF${NC} "
fi
######################################
# RUNNING HAPROXY
######################################
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${yellow}GOOD${NC}"
else
   status_haproxy="${red}OFF${NC} "
fi
######################################
# RUNNING XRAY
######################################
if [[ $xray_service == "running" ]]; then 
   status_xray="${yellow}ON${NC}"
else
   status_xray="${red}OFF${NC} "
fi
######################################
# RUNNING NGINX
######################################
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${yellow}ON${NC}"
else
   status_nginx="${red}OFF${NC} "
fi
######################################
# RUNNING DROPBEAR
######################################
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${yellow}ON${NC}"
else
   status_dropbear="${red}[OFF]${NC} "
fi

######################################

# // UPDATE / REVISI all menu
REVISI="https://raw.githubusercontent.com/sanzVPN/Azerd/ABSTRAK/"

######################################

# \\ Vless account //
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
# \\ Vmess account //
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
# \\ Trojan account //
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
# \\ shadowsocks account //
ssx=$(grep -c -E "^#!# " "/etc/xray/config.json")
let ssa=$ssx/2

######################################

# // ----->>> BACKGROUND

BG_GRN="\033[42;1m" # BG HIJAU
BG_RED="\033[45;1m" # BG MERAH
BG_CYN="\033[46;1m" # BG CYANN
BG_BLU="\033[44;1m" # BG BIRU
BG_PUR="\033[43;1m" # BG KUNING
BG_WHT="\033[47;1m" # BG PUTIH

GREN="\033[92m"
# // ----->>> COLOR VALIDATIONS

WHITE="\033[1;37m"
CYAN="\033[96;1m"
BLUE="\033[4;34m"
RED='\033[0;31m'
NC='\033[0m'
# // ----->>> COLOR VALIDATIONS
echo -e " "
WHITE="\033[1;37m"
CYAN="\033[96;1m"                                                     BLUE="\033[4;34m"                                                     RED='\033[0;31m'                                                      NC='\033[0m'
# // ----->>> COLOR VALIDATIONS
WHITE="\033[1;37m"                                                                                                    CYAN="\033[96;1m"                                                                                                     BLUE="\033[4;34m"                                                                                                     RED='\033[0;31m'
NC='\033[0m'
# // ----->>> COLOR VALIDATIONS
echo -e " "
echo -e " ${CYAN}┌─────────────────────────────────────────────────────────┐${NC}"
echo -e " ${CYAN}│$NC\033[44;1m                      SANZ TUNNELING                     $NC${GREN}│$NC"
echo -e " ${CYAN}└─────────────────────────────────────────────────────────┘${NC}"                                    echo -e " ${CYAN}┌─────────────────────────────────────────────────────────┐${NC}"
echo -e " ${CYAN}│ NGINX$NC $status_nginx│  ${CYAN}SSH-WS$NC $status_ws_epro│  ${CYAN}PROXY$NC $status_dropbear│ $sta>echo -e " ${CYAN}└─────────────────────────────────────────────────────────┘${NC}"
echo -e " ${CYAN}┌─────────────────────────────────────────────────────────┐${NC}"                                    echo -e " ${CYAN}│$NC • $NC${GREN} System OS ${NC}     ${GREN}=$NC $MODEL${NC}"
echo -e " ${CYAN}│$NC • $NC${GREN} Core Cpu ${NC}      ${GREN}=$NC $CORE${NC}"                                        echo -e " ${CYAN}│$NC • $NC${GREN} Server RAM ${NC}    ${GREN}=$NC $uram/$RAM MB $NC"
echo -e " ${CYAN}│$NC • $NC${GREN} City ${NC}          ${GREN}=$NC $CITY${NC}"                                        echo -e " ${CYAN}│$NC • $NC${GREN} Cpu Usage ${NC}     ${GREN}=$NC $cpu_usage${NC}"
echo -e " ${CYAN}│$NC • $NC${CYAN} Domain         ${CYAN}= $domain${NC}"
echo -e " ${CYAN}│$NC • $NC${CYAN} IP VPS         ${CYAN}= $IPVPS${NC}"
echo -e " ${CYAN}│$NC • $NC${CYAN} ISP            ${CYAN}= $ISP${NC}"
echo -e " ${CYAN}└─────────────────────────────────────────────────────────┘${NC}"
echo -e " ${CYAN}        ┌──────────────────────────────────────────┐${NC}"
echo -e " ${CYAN}        │$NC${RED} Status Script $NC     ${RED}=$NC ${sts}"
echo -e " ${CYAN}        │$NC${RED} Client/Regist $NC     ${RED}=$NC $username "
echo -e " ${CYAN}        │$NC${RED} Exp.Script $NC        ${RED}=$NC $exp / $certifacate Days$NC "
echo -e " ${CYAN}        └──────────────────────────────────────────┘${NC}"
echo -e " ${CYAN}           ──────────────────────────────────────── " | lolcat
echo -e " ${CYAN}     ┌──────────────────────────────────────────────────┐${NC}"
echo -e " ${CYAN}      $NC ${BLUE}1.)${NC} ${GREN}SSH / OPENVPN      ${NC}${CYAN} ${NC}    ${BLUE}6.)${NC} ${GREN}BAC>
echo -e " ${CYAN}     │$NC ${BLUE}2.)${NC} ${GREN}VMESS / XRAY       ${NC}${CYAN}│${NC}    ${BLUE}7.)${NC} ${GREN}BOT>
echo -e " ${CYAN}      $NC ${BLUE}3.)${NC} ${GREN}VLESS / XRAY       ${NC}${CYAN} ${NC}    ${BLUE}8.)${NC} ${GREN}UPD>
echo -e " ${CYAN}     │$NC ${BLUE}4.)${NC} ${GREN}TROJAN / XRAY      ${NC}${CYAN}│${NC}    ${BLUE}9.)${NC} ${GREN}FEA>
echo -e " ${CYAN}      $NC ${BLUE}5.)${NC} ${GREN}SS-R Libev         ${NC}${CYAN} ${NC}    ${BLUE}x.)${NC} ${RED}EXIT>
echo -e " ${CYAN}     └──────────────────────────────────────────────────┘${NC}"
echo -e " ${CYAN}           ──────────────────────────────────────── " | lolcat
echo -e " "
read -p " Select Options [ 1 / 9 or x ] >>   " wZtXtQ
case $wZtXtQ in
1)
clear
m-sshws
;;
2)
clear
m-vmess
;;
3)
clear
m-vless
;;
4)
clear
m-trojan
;;
5)
clear
m-ssws
;;
6)
clear
menu-backup
;;
7)
clear
bot
;;
8)
clear
wget ${REVISI}files/update.sh && chmod +x update.sh && ./update.sh
;;
9)
clear
features
;;
*)
clear
exit
;;
esac
